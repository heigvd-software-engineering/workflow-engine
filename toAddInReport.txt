- Graphes avec https://jgrapht.org/
    - Weakly connected pour détecter si on a le graphe qui est en plusieurs parties : 
		- https://jgrapht.org/javadoc/org.jgrapht.core/org/jgrapht/alg/connectivity/package-summary.html => A directed graph is called weakly connected if replacing all of its directed edges with undirected edges produces a connected (undirected) graph 
		- ConnectivityInspector isConnected https://jgrapht.org/javadoc/org.jgrapht.core/org/jgrapht/alg/connectivity/ConnectivityInspector.html
    - CycleDetector pour détecter la présence de cycles
		- CycleDetector detectCycles() https://jgrapht.org/javadoc/org.jgrapht.core/org/jgrapht/alg/cycle/CycleDetector.html
- Explication de la structure des types pour le workflow
- Explication de comment est géré la vérification du graphe (en lien avec la détection de cycle et de si le graphe est en plusieurs parties)
- Expliquer pourquoi avoir fait des Builder pour les Nodes et les Connectors (problème de visibilité des constructeurs de Nodes et ne pas pouvoir y accéder depuis Workflow pour les créer à cause de l'organisation des packages)
	- Expliquer pourquoi faire une ModifiableNode qui permet de modifier les input / output et les deterministic etc
- Expliquer la structure de ConnectorData et Connector (pourquoi utiliser un bridge pattern ici => pour ne pas avoir à créer ModifiableInputConnector, ModifiableOutputConnector, ModifiableInputFlowConnector, ...)
- Expliquer pourquoi avoir utilisé @CheckReturnValue peut-être => pour avoir un warning si on n'utilise pas la valeur de retour
- Expliquer pourquoi les @Nonnull et les Objects.requireNonNull() => Pour être sûr de ne jamais recevoir de valeur nulle